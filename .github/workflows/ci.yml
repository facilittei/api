name: CI

on:
  push:
    branches:
      # - "dev"
      - "main"

jobs:
  build:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push nginx
        id: build-image-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nginx
          IMAGE_TAG: ${{ github.ref != 'refs/heads/main' && github.sha || 'latest' }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.nginx . \
            --build-arg 'VERSION=${{ github.sha }}'
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and push php-fpm
        id: build-image-php-fpm
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: php-fpm
          IMAGE_TAG: ${{ github.ref != 'refs/heads/main' && github.sha || 'latest' }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.php . \
            --build-arg 'VERSION=${{ github.sha }}' \
            --build-arg 'APP_ENV=${{ github.ref != 'refs/heads/main' && 'local' || 'production' }}' \
            --build-arg 'APP_DEBUG=${{ github.ref != 'refs/heads/main' && 'true' || 'false' }}' \
            --build-arg 'APP_URL=${{ secrets.APP_URL }}' \
            --build-arg 'APP_WEBSITE_URL=${{ secrets.APP_WEBSITE_URL }}' \
            --build-arg 'APP_CLIENT_URL=${{ secrets.APP_CLIENT_URL }}' \
            --build-arg 'APP_ASSETS_URL=${{ secrets.APP_ASSETS_URL }}' \
            --build-arg 'DB_CONNECTION=${{ secrets.DB_CONNECTION }}' \
            --build-arg 'DB_HOST=${{ secrets.DB_HOST }}' \
            --build-arg 'DB_PORT=${{ secrets.DB_PORT }}' \
            --build-arg 'DB_DATABASE=${{ secrets.DB_DATABASE }}' \
            --build-arg 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
            --build-arg 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
            --build-arg 'CACHE_DRIVER=${{ secrets.CACHE_DRIVER }}' \
            --build-arg 'QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }}' \
            --build-arg 'QUEUE_DRIVER=${{ secrets.QUEUE_DRIVER }}' \
            --build-arg 'SQS_PREFIX=${{ secrets.SQS_PREFIX }}' \
            --build-arg 'SQS_QUEUE=${{ secrets.SQS_QUEUE }}' \
            --build-arg 'REDIS_CLIENT=${{ secrets.REDIS_CLIENT }}' \
            --build-arg 'REDIS_HOST=${{ secrets.REDIS_HOST }}' \
            --build-arg 'REDIS_PORT=${{ secrets.REDIS_PORT }}' \
            --build-arg 'MAIL_MAILER=${{ secrets.MAIL_MAILER }}' \
            --build-arg 'MAIL_HOST=${{ secrets.MAIL_HOST }}' \
            --build-arg 'MAIL_PORT=${{ secrets.MAIL_PORT }}' \
            --build-arg 'MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}' \
            --build-arg 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' \
            --build-arg 'MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}' \
            --build-arg 'MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}' \
            --build-arg 'MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}' \
            --build-arg 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            --build-arg 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            --build-arg 'AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}' \
            --build-arg 'AWS_BUCKET=${{ secrets.AWS_BUCKET }}'
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
